<?php

namespace App\Listeners;

use App\Events\OrderShipped;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;

class SendShipmentNotification implements ShouldQueue
// To specify that a listener should be queued, add the ShouldQueue interface to the listener class.
// Listeners generated by the event:generate Artisan
// command already have this interface imported into the current namespace, so you can use it immediately:
{
    use InteractsWithQueue;

    // If you would like to customize the queue connection, queue name,
    // or queue delay time of an event listener,
    // you may define the $connection, $queue, or $delay properties on your listener class:
    /**
     * The name of the connection the job should be sent to.
     *
     * @var string|null
     */
    public $connection = 'sqs';

    /**
     * The name of the queue the job should be sent to.
     *
     * @var string|null
     */
    public $queue = 'listeners';

    /**
     * The time (seconds) before the job should be processed.
     *
     * @var int
     */
    public $delay = 60;

    /**
     * Create the event listener.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Handle the event.
     *
     * @param OrderShipped $event
     * @return void
     */
    public function handle(OrderShipped $event)
    {
        // Sometimes, you may wish to stop the propagation of an event to other listeners.
        // You may do so by returning false from your listener's handle method.

//        return false;

        if (true) {
            // If you need to manually access the listener's underlying queue job's delete and release methods,
            // you may do so using the Illuminate\Queue\InteractsWithQueue trait.
            // This trait is imported by default on generated listeners and provides access to these methods:
            $this->release(30);
        }
    }

    /**
     * Get the name of the listener's queue.
     *
     * @return string
     */
    public function viaQueue()
    {
        return 'listeners';
    }

    /**
     * Sometimes, you may need to determine whether a listener should be
     * queued based on some data that's only available at runtime.
     * To accomplish this, a shouldQueue method may be added to a listener
     * to determine whether the listener should be queued.
     * If the shouldQueue method returns false, the listener will not be executed:
     *
     * @param OrderShipped $event
     * @return bool
     */
    public function shouldQueue(OrderShipped $event)
    {
        return $event->order->subtotal >= 5000;
    }

    /**
     * Handle a job failure.
     *
     * Sometimes your queued event listeners may fail.
     * If queued listener exceeds the maximum number of attempts as defined by your queue worker,
     * the failed method will be called on your listener.
     * The failed method receives the event instance and the exception that caused the failure:
     *
     * @param \App\Events\OrderShipped $event
     * @param \Throwable $exception
     * @return void
     */
    public function failed(OrderShipped $event, $exception)
    {
        //
    }
}
